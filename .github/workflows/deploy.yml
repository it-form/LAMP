name: CI/CD WordPress

on:
  push:
    branches: [ "main" ]
  pull_request:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      DOCKER_IMAGE: itform/wordpress-ci

    steps:
      # Checkout du code
      - name: Intégration du code
        uses: actions/checkout@v4

      # Vérifier Docker
      - name: Vérification Docker
        run: |
          docker --version
          docker compose version || true

      # Build de l'image WordPress custom
      - name: Build de l'image WordPress custom
        run: |
          docker build -t $DOCKER_IMAGE:latest -t $DOCKER_IMAGE:${{ github.sha }} .

      # Lancer docker-compose pour test
      - name: Lancer docker-compose pour test
        run: docker compose up -d

      # Attente que MySQL soit prêt
      - name: Attente MySQL
        env:
          DB_USER: ${{ secrets.WP_DB_USER }}
          DB_PASSWORD: ${{ secrets.WP_DB_PASSWORD }}
        run: |
          for i in $(seq 1 30); do
            if docker compose exec -T -e MYSQL_PWD="${DB_PASSWORD}" db \
               mysql -h127.0.0.1 -u"${DB_USER}" -e "SELECT 1" > /dev/null 2>&1; then
              echo "DB ready"
              break
            fi
            echo "Waiting for DB... ($i/30)"
            sleep 2
          done

      # Attente que WordPress soit prêt et test MySQL
      - name: Test WordPress et MySQL
        env:
          DB_USER: ${{ secrets.WP_DB_USER }}
          DB_PASSWORD: ${{ secrets.WP_DB_PASSWORD }}
        run: |
          # Attente que WordPress réponde
          for i in $(seq 1 30); do
            if docker compose exec -T wordpress curl -f http://localhost:80 > /dev/null 2>&1; then
              echo "WordPress ready"
              break
            fi
            echo "Waiting for WordPress... ($i/30)"
            sleep 2
          done

          # Test MySQL (mot de passe sécurisé)
          docker compose exec -T -e MYSQL_PWD="${DB_PASSWORD}" db mysql -u"${DB_USER}" -e "SHOW DATABASES;"

      # Connexion sécurisée DockerHub
      - name: Connexion DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DCK_USER }}
          password: ${{ secrets.DCK_TOKEN }}

      # Push de l'image
      - name: Push image WordPress custom
        run: |
          docker push $DOCKER_IMAGE:latest
          docker push $DOCKER_IMAGE:${{ github.sha }}

      # Nettoyage local
      - name: Nettoyage local
        if: always()
        run: docker compose down -v

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      # Checkout du repo
      - name: Checkout du repo
        uses: actions/checkout@v4

      # Copier docker-compose.yml sur le serveur
      - name: Copier docker-compose.yml sur le serveur
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SRV_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SRV_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "docker-compose.yml"
          target: "/home/${{ secrets.SRV_USER }}/wordpress-app/"

      # Connexion SSH et déploiement
      - name: Connexion SSH et déploiement
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.SRV_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SRV_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            echo "${{ secrets.DCK_TOKEN }}" | docker login -u "${{ secrets.DCK_USER }}" --password-stdin
            cd /home/${{ secrets.SRV_USER }}/wordpress-app
            docker compose pull
            docker compose up -d --remove-orphans


